
{
  "entities": {
    "ExtractedProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ExtractedProfile",
      "type": "object",
      "description": "Represents a profile extracted from a raw email.",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "company": {
          "type": "string"
        },
        "linkedin": {
          "type": "string",
          "format": "uri"
        },
        "extraction_status": {
          "type": "string",
          "enum": [
            "partial",
            "complete"
          ]
        },
        "raw_text": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "VerificationResult": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VerificationResult",
      "type": "object",
      "description": "Represents the result of a profile verification.",
      "properties": {
        "profileId": {
          "type": "string",
          "description": "The ID of the ExtractedProfile document."
        },
        "score": {
          "type": "number",
          "description": "A confidence score from 0 to 1."
        },
        "reason": {
          "type": "string",
          "description": "An explanation of how the score was calculated."
        },
        "domainMatch": {
          "type": "boolean",
          "description": "Whether the email domain matches the company."
        },
        "deliverability": {
          "type": "string",
          "enum": [
            "DELIVERABLE",
            "UNDELIVERABLE",
            "RISKY"
          ],
          "description": "The result from the email verification API."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "When the verification was performed."
        }
      },
      "required": [
        "profileId",
        "score",
        "reason",
        "domainMatch",
        "deliverability",
        "timestamp"
      ]
    },
    "VerifiedProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VerifiedProfile",
      "type": "object",
      "description": "Represents a profile that has passed verification.",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "company": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "verification_details": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "name",
        "email",
        "company",
        "verified",
        "verification_details",
        "timestamp"
      ]
    },
    "LinkedInVerification": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LinkedInVerification",
      "type": "object",
      "description": "Stores the result of a LinkedIn profile validation.",
      "properties": {
        "extractedProfileId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "inputCompany": {
          "type": "string"
        },
        "validationStatus": {
          "type": "string",
          "enum": [
            "verified",
            "company_mismatch",
            "profile_not_found",
            "api_limit_reached",
            "error"
          ]
        },
        "validationMessage": {
          "type": "string"
        },
        "foundLinkedInUrl": {
          "type": "string",
          "format": "uri"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "extractedProfileId",
        "name",
        "email",
        "inputCompany",
        "validationStatus",
        "validationMessage",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/extracted-profiles-test/{profileId}",
        "definition": {
          "entityName": "ExtractedProfile",
          "schema": {
            "$ref": "#/backend/entities/ExtractedProfile"
          },
          "description": "Stores contact information extracted from raw emails."
        }
      },
      {
        "path": "/verification-test/{verificationId}",
        "definition": {
          "entityName": "VerificationResult",
          "schema": {
            "$ref": "#/backend/entities/VerificationResult"
          },
          "description": "Stores the results of profile verifications."
        }
      },
      {
        "path": "/profiles-verified/{profileId}",
        "definition": {
          "entityName": "VerifiedProfile",
          "schema": {
            "$ref": "#/backend/entities/VerifiedProfile"
          },
          "description": "Stores profiles that have passed verification."
        }
      },
      {
        "path": "/linkedin-verifications/{verificationId}",
        "definition": {
          "entityName": "LinkedInVerification",
          "schema": {
            "$ref": "#/backend/entities/LinkedInVerification"
          },
          "description": "Stores the results of LinkedIn profile validations."
        }
      }
    ],
    "reasoning": "This Firestore data structure is designed to securely store user profiles and raw emails fetched from Gmail, focusing on clear ownership and authorization independence. We utilize path-based ownership for user profiles and raw emails to ensure that only the associated user can access their data. This design avoids complex `get()` calls in security rules, promoting atomic operations and simplified debugging.\n\nThe structure supports secure `list` operations (QAPs) through structural segregation. User profiles and their associated raw emails are stored under the `/users/{userId}` path, preventing unauthorized access. Access to the `raw-emails-test` collection is restricted to the user identified by `{userId}`. This segregation ensures that users can only list emails associated with their own profile.\n\nAuthorization independence is achieved by associating each `RawEmail` document with its `userProfileId`. This eliminates the need to fetch the user profile to authorize access to the email. All authorization decisions can be made based on the `request.auth.uid` and the `userProfileId` within the `RawEmail` document."
  }
}
