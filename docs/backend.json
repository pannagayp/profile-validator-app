{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile with validated email and associated data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "validationStatus": {
          "type": "string",
          "description": "The validation status of the email (e.g., 'valid', 'invalid', 'pending')."
        },
        "validationDate": {
          "type": "string",
          "description": "The date and time when the email was last validated.",
          "format": "date-time"
        },
        "additionalData": {
          "type": "string",
          "description": "Additional data associated with the user profile (e.g., name, location)."
        }
      },
      "required": [
        "id",
        "email",
        "validationStatus"
      ]
    },
    "RawEmail": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RawEmail",
      "type": "object",
      "description": "Represents a raw email fetched from the Gmail account.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the RawEmail entity."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the email was fetched and stored.",
          "format": "date-time"
        },
        "emailBody": {
          "type": "string",
          "description": "The full body content of the email."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N RawEmail)"
        }
      },
      "required": [
        "id",
        "timestamp",
        "emailBody"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/profiles/{profileId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Uses path-based ownership: only the user with ID {userId} can access their profile. {profileId} is generated on client side.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user. Corresponds to the Firebase Authentication UID."
            },
            {
              "name": "profileId",
              "description": "The unique identifier for the user profile. Auto-generated by the client."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/raw-emails-test/{emailId}",
        "definition": {
          "entityName": "RawEmail",
          "schema": {
            "$ref": "#/backend/entities/RawEmail"
          },
          "description": "Stores raw email data fetched from Gmail. Uses path-based ownership: only the user with ID {userId} can access their emails. Includes 'userProfileId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user. Corresponds to the Firebase Authentication UID."
            },
            {
              "name": "emailId",
              "description": "The unique identifier for the raw email. Auto-generated by the client."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore data structure is designed to securely store user profiles and raw emails fetched from Gmail, focusing on clear ownership and authorization independence. We utilize path-based ownership for user profiles and raw emails to ensure that only the associated user can access their data. This design avoids complex `get()` calls in security rules, promoting atomic operations and simplified debugging.\n\nThe structure supports secure `list` operations (QAPs) through structural segregation. User profiles and their associated raw emails are stored under the `/users/{userId}` path, preventing unauthorized access. Access to the `raw-emails-test` collection is restricted to the user identified by `{userId}`. This segregation ensures that users can only list emails associated with their own profile.\n\nAuthorization independence is achieved by associating each `RawEmail` document with its `userProfileId`. This eliminates the need to fetch the user profile to authorize access to the email. All authorization decisions can be made based on the `request.auth.uid` and the `userProfileId` within the `RawEmail` document."
  }
}