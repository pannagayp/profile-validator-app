rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can create, read, update, or delete their own profile.
     * @path /users/{userId}/profiles/{profileId}
     * @allow (create) - Authenticated user with UID 'user123' creates a new profile with id = 'user123'.
     * @allow (get) - Authenticated user with UID 'user123' reads their own profile.
     * @allow (update) - Authenticated user with UID 'user123' updates their own profile.
     * @allow (delete) - Authenticated user with UID 'user123' deletes their own profile.
     * @deny (create) - Authenticated user with UID 'user456' attempts to create a profile with id = 'user123'.
     * @deny (get) - Authenticated user with UID 'user456' attempts to read profile with id = 'user123'.
     * @deny (update) - Authenticated user with UID 'user456' attempts to update profile with id = 'user123'.
     * @deny (delete) - Authenticated user with UID 'user456' attempts to delete profile with id = 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/profiles/{profileId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user ID matches the userId in the path
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner and the resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for raw emails. Only the authenticated user can create, read, update, or delete their own emails.
     * @path /users/{userId}/raw-emails-test/{emailId}
     * @allow (create) - Authenticated user with UID 'user123' creates a new email with userId = 'user123'.
     * @allow (get) - Authenticated user with UID 'user123' reads their own email.
     * @allow (update) - Authenticated user with UID 'user123' updates their own email.
     * @allow (delete) - Authenticated user with UID 'user123' deletes their own email.
     * @deny (create) - Authenticated user with UID 'user456' attempts to create an email with userId = 'user123'.
     * @deny (get) - Authenticated user with UID 'user456' attempts to read email with userId = 'user123'.
     * @deny (update) - Authenticated user with UID 'user456' attempts to update email with userId = 'user123'.
     * @deny (delete) - Authenticated user with UID 'user456' attempts to delete email with userId = 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/raw-emails-test/{emailId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user ID matches the userId in the path
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner and the resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}