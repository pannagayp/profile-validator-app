/**
 * @fileoverview Firestore Security Rules for the Email Processing System.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user identity and role.
 * User profile data is protected, and email and attachment data is accessible with appropriate authorization.
 *
 * Data Structure:
 * The Firestore database has three main collections:
 *   - /userProfiles/{userProfileId}: Stores user profile information, accessible only to the user themselves.
 *   - /emails/{emailId}: Stores email metadata, including a nullable link to user profiles.
 *   - /emails/{emailId}/attachments/{attachmentId}: Stores attachment data associated with emails.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and accessible only to the owning user. Listing all users is disallowed.
 * - Anyone can create, update or delete emails and attachments. This may need to be changed in the future.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userProfileId}
     * @allow (create) - A user can create their own profile if the ID matches their auth UID.
     * @allow (get, update, delete) - A user can read, update, or delete their own profile.
     * @deny (create) - A user cannot create a profile with an ID that doesn't match their auth UID.
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /userProfiles/{userProfileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userProfileId);
      allow list: if false;
      allow create: if isOwner(userProfileId);
      allow update: if isExistingOwner(userProfileId);
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Controls access to email documents.
     * @path /emails/{emailId}
     * @allow (get, list) - Anyone can read or list email documents.
     * @allow (create, update, delete) - Anyone can create, update or delete email documents.
     * @principle Public read access, no ownership restrictions.
     */
    match /emails/{emailId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Controls access to attachment documents within an email.
     * @path /emails/{emailId}/attachments/{attachmentId}
     * @allow (get, list) - Anyone can read or list attachment documents.
     * @allow (create, update, delete) - Anyone can create, update or delete attachment documents.
     * @principle Public read access, no ownership restrictions.
     */
    match /emails/{emailId}/attachments/{attachmentId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }
}