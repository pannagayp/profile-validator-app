/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and raw emails,
 * ensuring that only authenticated users can access their own data. Public read access
 * is granted to extracted profiles, verification results, and verified profiles,
 * with owner-only write access (though ownership is not currently enforced due to missing schema fields).
 *
 * Data Structure:
 * - User profiles and raw emails are nested under `/users/{userId}`.
 * - Extracted profiles, verification results, and verified profiles are stored in top-level collections.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profiles and raw emails.
 * - Listing of raw emails is restricted to the owning user.
 * - Public read access is allowed for extracted profiles, verification results, and verified profiles.
 * - Write access to extracted profiles, verification results, and verified profiles is currently open, but needs to be secured by enforcing an ownership model.
 *
 * Denormalization for Authorization:
 * - The `RawEmail` entity contains a `userProfileId` field, allowing for authorization
 *   decisions without needing to fetch the associated `UserProfile`.
 *
 * Structural Segregation:
 * - User-specific data (profiles, raw emails) is stored under the `/users/{userId}` path,
 *   while public data (extracted profiles, verification results, verified profiles) is stored
 *   in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/profiles/{profileId}
     * @allow (create) User with ID 'user123' creates a new profile with ID 'profile456' under /users/user123/profiles/profile456.
     * @deny (create) User with ID 'user123' attempts to create a profile under /users/user456/profiles/profile456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/profiles/{profileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for raw emails.
     * @path /users/{userId}/raw-emails-test/{emailId}
     * @allow (create) User with ID 'user123' creates a new raw email with ID 'email456' under /users/user123/raw-emails-test/email456.
     * @deny (create) User with ID 'user123' attempts to create a raw email under /users/user456/raw-emails-test/email456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/raw-emails-test/{emailId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to extracted profiles. Owner-only writes are intended but not enforced because of missing `ownerId` field.
     * @path /extracted-profiles-test/{profileId}
     * @allow (get) Any user can read an extracted profile.
     * @deny (create) No user can create a profile if write access is disabled.
     * @principle Allows public reads and intends to restrict writes to owners (but missing owner field).
     */
    match /extracted-profiles-test/{profileId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to verification results. Owner-only writes are intended but not enforced because of missing `ownerId` field.
     * @path /verification-test/{verificationId}
     * @allow (get) Any user can read a verification result.
     * @deny (create) No user can create a verification result if write access is disabled.
     * @principle Allows public reads and intends to restrict writes to owners (but missing owner field).
     */
    match /verification-test/{verificationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to verified profiles. Owner-only writes are intended but not enforced because of missing `ownerId` field.
     * @path /profiles-verified/{profileId}
     * @allow (get) Any user can read a verified profile.
     * @deny (create) No user can create a verified profile if write access is disabled.
     * @principle Allows public reads and intends to restrict writes to owners (but missing owner field).
     */
    match /profiles-verified/{profileId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}