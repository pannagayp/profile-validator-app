/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and raw emails,
 * ensuring that only authenticated users can access their own data. Public read access
 * is granted to collections containing extracted and verified profiles. Data validation
 * is limited to authorization and relational integrity checks to facilitate rapid prototyping.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}/profiles/{profileId}`.
 * - Raw emails are stored under `/users/{userId}/raw-emails-test/{emailId}`.
 * - Extracted profiles are stored in `/extracted-profiles-test/{profileId}`.
 * - Verification results are stored in `/verification-test/{verificationId}`.
 * - Verified profiles are stored in `/profiles-verified/{profileId}`.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is allowed for collections of extracted and verified profiles.
 * - Strict ownership is enforced for user profiles and raw emails.
 *
 * Denormalization for Authorization:
 * - The `RawEmail` document contains a `userProfileId` field to avoid needing to fetch the user profile for authorization.
 *
 * Structural Segregation:
 * - User-specific data (profiles, emails) is stored under `/users/{userId}` to enable secure list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}/profiles/{profileId}
     * @allow (create) - User 'abc' can create a profile with ID 'abc' under /users/abc/profiles/{profileId}.
     * @allow (update) - User 'abc' can update their profile under /users/abc/profiles/{profileId}.
     * @allow (delete) - User 'abc' can delete their profile under /users/abc/profiles/{profileId}.
     * @deny (create) - User 'def' cannot create a profile under /users/abc/profiles/{profileId}.
     * @deny (update) - User 'def' cannot update user 'abc' profile under /users/abc/profiles/{profileId}.
     * @deny (delete) - User 'def' cannot delete user 'abc' profile under /users/abc/profiles/{profileId}.
     * @principle Enforces document ownership for writes. Validates relational integrity between the path and the document's internal fields.
     */
    match /users/{userId}/profiles/{profileId} {
      // ----------- READ -----------
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // ----------- WRITE -----------
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for raw emails.
     * @path /users/{userId}/raw-emails-test/{emailId}
     * @allow (create) - User 'abc' can create an email with userProfileId 'abc' under /users/abc/raw-emails-test/{emailId}.
     * @allow (update) - User 'abc' can update their email under /users/abc/raw-emails-test/{emailId}.
     * @allow (delete) - User 'abc' can delete their email under /users/abc/raw-emails-test/{emailId}.
     * @deny (create) - User 'def' cannot create an email under /users/abc/raw-emails-test/{emailId}.
     * @deny (update) - User 'def' cannot update user 'abc' email under /users/abc/raw-emails-test/{emailId}.
     * @deny (delete) - User 'def' cannot delete user 'abc' email under /users/abc/raw-emails-test/{emailId}.
     * @principle Enforces document ownership for writes. Validates relational integrity between the path and the document's internal fields.
     */
    match /users/{userId}/raw-emails-test/{emailId} {
      // ----------- READ -----------
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // ----------- WRITE -----------
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userProfileId == request.resource.data.userProfileId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to extracted profiles, with no write access.
     * @path /extracted-profiles-test/{profileId}
     * @allow (get) - Any user can read an extracted profile.
     * @allow (list) - Any user can list extracted profiles.
     * @deny (create) - No one can create extracted profiles.
     * @deny (update) - No one can update extracted profiles.
     * @deny (delete) - No one can delete extracted profiles.
     * @principle Allows public read access. Restricts all write access.
     */
    match /extracted-profiles-test/{profileId} {
      // ----------- READ -----------
      allow get: if true;
      allow list: if true;

      // ----------- WRITE -----------
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to verification results, with no write access.
     * @path /verification-test/{verificationId}
     * @allow (get) - Any user can read a verification result.
     * @allow (list) - Any user can list verification results.
     * @deny (create) - No one can create verification results.
     * @deny (update) - No one can update verification results.
     * @deny (delete) - No one can delete verification results.
     * @principle Allows public read access. Restricts all write access.
     */
    match /verification-test/{verificationId} {
      // ----------- READ -----------
      allow get: if true;
      allow list: if true;

      // ----------- WRITE -----------
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to verified profiles, with no write access.
     * @path /profiles-verified/{profileId}
     * @allow (get) - Any user can read a verified profile.
     * @allow (list) - Any user can list verified profiles.
     * @deny (create) - No one can create verified profiles.
     * @deny (update) - No one can update verified profiles.
     * @deny (delete) - No one can delete verified profiles.
     * @principle Allows public read access. Restricts all write access.
     */
    match /profiles-verified/{profileId} {
      // ----------- READ -----------
      allow get: if true;
      allow list: if true;

      // ----------- WRITE -----------
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // ----------- HELPER FUNCTIONS -----------
  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user ID matches the authenticated user's ID.
   * @param {string} userId The user ID to check.
   * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of an existing document.
   * @param {string} userId The user ID to check.
   * @return {boolean} True if the user ID matches the authenticated user's ID and the document exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}