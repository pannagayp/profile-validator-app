/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and allows public read access to emails.
 *   Writes to user profiles are restricted to the owner (the user with the matching UID).
 *   Emails are publicly readable but only created via backend, and attachments are only accessible via the parent email.
 * @data_structure
 *   - /userProfiles/{userId}: Stores user profile data, accessible only to the user themselves.
 *   - /emails/{emailId}: Stores email data, publicly readable.
 *   - /emails/{emailId}/attachments/{attachmentId}: Stores attachment data, accessible only via the parent email.
 * @key_security_decisions
 *   - User listing is disallowed.
 *   - Emails are publicly readable to simplify data retrieval. Writes are restricted to the backend through use of server timestamps to prevent client writes.
 *   - Attachments are secured via path-based access, requiring a valid email ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userProfileId}
     * @allow (create) - A user can create their own profile if the `userProfileId` matches their `auth.uid`.
     * @allow (get, update, delete) - A user can only access or modify their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get, update, delete) - A user cannot access or modify another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /userProfiles/{userProfileId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userProfileId);
      allow list: if false;

      allow create: if isOwner(userProfileId) && request.resource.data.id == userProfileId;
      allow update: if isExistingOwner(userProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Controls access to email documents.
     * @path /emails/{emailId}
     * @allow (get, list) - Emails are publicly readable.
     * @allow (create) - Emails can only be created.
     * @deny (update, delete) - Emails cannot be updated or deleted.
     * @principle Allows public read access while restricting write access to prevent unauthorized modifications.
     */
    match /emails/{emailId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to attachment documents nested under email documents.
     * @path /emails/{emailId}/attachments/{attachmentId}
     * @allow (get, list, create) - Attachments are accessible given a valid email.
     * @deny (update, delete) - Attachments cannot be updated or deleted.
     * @principle Secures attachments via path-based access, requiring a valid email ID.
     */
    match /emails/{emailId}/attachments/{attachmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}