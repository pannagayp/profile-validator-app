/**
 * @fileoverview Firestore Security Rules for Email Processing Application
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, allowing users to manage their own profile information. Email data is generally public, but attachment data is restricted to the owning email.
 *
 * Data Structure:
 * - /userProfiles/{userProfileId}: Stores individual user profile data. 'userProfileId' MUST match the authenticated user's UID.
 * - /emails/{emailId}: Stores email metadata.  Open read, restricted write.
 * - /emails/{emailId}/attachments/{attachmentId}: Stores attachment data.  Write-protected by email ownership.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned and managed by the authenticated user. Listing of all user profiles is disallowed.
 * - Email metadata is publicly readable to facilitate data ingestion.
 * - Attachment data is accessible only to authorized users.
 *
 * Denormalization for Authorization:
 * - User profile documents MUST have an `id` field that matches the document ID (`userProfileId`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /userProfiles/{userProfileId}
     * @allow (create) Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) Authenticated user accesses their own profile.
     * @deny (create) Authenticated user attempts to create a profile with a mismatched UID.
     * @deny (list) Listing user profiles is not allowed.
     * @principle Enforces document ownership and restricts access to a user's own data.
     */
    match /userProfiles/{userProfileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read rules
      allow get: if isOwner(userProfileId);
      allow list: if false;

      // Write rules
      allow create: if isSignedIn() && isOwner(userProfileId) && request.resource.data.id == userProfileId;
      allow update: if isExistingOwner(userProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userProfileId);
    }

    /**
     * @description Controls access to email documents.
     * @path /emails/{emailId}
     * @allow (get, list) Public read access to email metadata.
     * @deny (create, update, delete) Only authorized services can modify email documents.
     * @principle Public read access with restricted writes.
     */
    match /emails/{emailId} {
      // Read rules: Public
      allow get, list: if true;

      // Write rules: Restricted
      allow create, update, delete: if false; // TODO: Define authorized service accounts for email creation, updates, and deletes.
    }

    /**
     * @description Controls access to attachment documents within an email.
     * @path /emails/{emailId}/attachments/{attachmentId}
     * @allow (get, list) Public Read Access to attachment Metadata
     * @allow (create) Only authorized services can create attachment documents.
     * @allow (update, delete) No client-side updates or deletes of attachments.
     * @principle Restricts attachment management to backend services.
     */
    match /emails/{emailId}/attachments/{attachmentId} {
       // Read rules: Public Access
      allow get, list: if true; // TODO: Verify with the client whether public access is needed

      // Write rules: Restricted
      allow create, update, delete: if false; // TODO: Define authorized service accounts for email creation, updates, and deletes.
    }
  }
}