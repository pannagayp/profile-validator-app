/**
 * @fileoverview Firestore Security Rules for the email processing application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user identity. It enforces strict
 * separation of data and ensures that users can only access data that they are authorized to view.
 * Public read access is only granted where explicitly intended and safe.
 *
 * Data Structure:
 * - /client/{clientId}: Stores client profiles, where 'clientId' is the user's unique ID.
 * - /emails/{emailId}: Stores email data.  A `clientId` field, if present, links an email to a client.
 * - /emails/{emailId}/attachments/{attachmentId}: Stores attachment metadata and content.
 *
 * Key Security Decisions:
 * - Clients can only read/write their own profile data.
 * - Listing of clients is disallowed.
 * - Public read access is allowed for emails, as the `clientId` is nullable.
 * - Attachments are only accessible via email documents.
 *
 * Denormalization for Authorization:
 * - The `emails` collection contains a `clientId` field. This is used to quickly associate emails with clients, avoiding expensive queries. The `clientId` field is nullable, to safely handle emails from unknown senders.
 *
 * Structural Segregation:
 * - Client profiles and email data are stored in separate collections (`/client` and `/emails`). This ensures that client-specific information is protected while allowing emails to be processed independently.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the client profiles. Clients can only read and write their own profile data. Listing all clients is disallowed.
     * @path /client/{clientId}
     * @allow (create) - User 'uvKBFO8JZsXd5o0KmVaADjdoEmt2' creates a new client profile with ID matching their UID.
     * @allow (get) - User 'uvKBFO8JZsXd5o0KmVaADjdoEmt2' reads their own client profile.
     * @allow (update) - User 'uvKBFO8JZsXd5o0KmVaADjdoEmt2' updates their own client profile.
     * @allow (delete) - User 'uvKBFO8JZsXd5o0KmVaADjdoEmt2' deletes their own client profile.
     * @deny (create) - User 'uvKBFO8JZsXd5o0KmVaADjdoEmt2' attempts to create a client profile with an ID different from their UID.
     * @deny (get) - User 'anotherUserId' attempts to read client profile 'uvKBFO8JZsXd5o0KmVaADjdoEmt2'.
     * @deny (update) - User 'anotherUserId' attempts to update client profile 'uvKBFO8JZsXd5o0KmVaADjdoEmt2'.
     * @deny (delete) - User 'anotherUserId' attempts to delete client profile 'uvKBFO8JZsXd5o0KmVaADjdoEmt2'.
     * @deny (list) - Any user attempts to list all client profiles.
     * @principle Enforces document ownership for all operations on client profiles.
     */
    match /client/{clientId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(clientId) && request.resource.data.id == clientId;
      allow get: if isOwner(clientId);
      allow update: if isExistingOwner(clientId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientId);
      allow list: if false;
    }

    /**
     * @description Allows public read access to email data. Writes are not allowed directly.
     * @path /emails/{emailId}
     * @allow (get) - Any user can read email data.
     * @allow (list) - Any user can list email documents.
     * @deny (create) - Any user attempts to create a new email document.
     * @deny (update) - Any user attempts to update an existing email document.
     * @deny (delete) - Any user attempts to delete an email document.
     * @principle Allows public read access to email data.
     */
    match /emails/{emailId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects attachments stored as subcollections of emails. Access is only allowed via email documents.
     * @path /emails/{emailId}/attachments/{attachmentId}
     * @allow (get) - Any user can read attachment data.
     * @allow (list) - Any user can list attachment documents.
     * @deny (create) - Any user attempts to create a new attachment document.
     * @deny (update) - Any user attempts to update an existing attachment document.
     * @deny (delete) - Any user attempts to delete an attachment document.
     * @principle Allows public read access to attachment data, inheriting the email's public read access.
     */
    match /emails/{emailId}/attachments/{attachmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}