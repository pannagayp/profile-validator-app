/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and raw emails,
 * ensuring that only authenticated users can access their own data. Public read access
 * is granted to extracted profiles, verification results, and verified profiles, while
 * write access is not permitted without further refinement.
 *
 * Data Structure:
 * - User profiles and raw emails are nested under /users/{userId}.
 * - Extracted profiles, verification results, and verified profiles are stored in
 *   top-level collections.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Path-based ownership is enforced for user profiles and raw emails.
 * - Public read access is granted to extracted profiles, verification results, and
 *   verified profiles.
 *
 * Denormalization for Authorization:
 * - The 'RawEmail' document contains a 'userProfileId' field that matches the
 *   document ID of the associated 'UserProfile'. This denormalization avoids the
 *   need for costly 'get()' calls to authorize access to the 'RawEmail' document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}/profiles/{profileId}
     * @allow (create) Authenticated user with matching {userId} can create their profile.
     * @allow (get) Authenticated user with matching {userId} can get their profile.
     * @allow (update) Authenticated user with matching {userId} can update their profile.
     * @allow (delete) Authenticated user with matching {userId} can delete their profile.
     * @deny (create) Authenticated user with mismatched {userId} cannot create the profile.
     * @deny (get) Authenticated user with mismatched {userId} cannot get the profile.
     * @deny (update) Authenticated user with mismatched {userId} cannot update the profile.
     * @deny (delete) Authenticated user with mismatched {userId} cannot delete the profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/profiles/{profileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for raw emails.
     * @path /users/{userId}/raw-emails-test/{emailId}
     * @allow (create) Authenticated user with matching {userId} can create their raw email.
     * @allow (get) Authenticated user with matching {userId} can get their raw email.
     * @allow (update) Authenticated user with matching {userId} can update their raw email.
     * @allow (delete) Authenticated user with matching {userId} can delete their raw email.
     * @deny (create) Authenticated user with mismatched {userId} cannot create the raw email.
     * @deny (get) Authenticated user with mismatched {userId} cannot get the raw email.
     * @deny (update) Authenticated user with mismatched {userId} cannot update the raw email.
     * @deny (delete) Authenticated user with mismatched {userId} cannot delete the raw email.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/raw-emails-test/{emailId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for extracted profiles.
     * @path /extracted-profiles-test/{profileId}
     * @allow (get) Any user can get extracted profiles.
     * @allow (list) Any user can list extracted profiles.
     * @deny (create) No user can create extracted profiles without validation.
     * @deny (update) No user can update extracted profiles without validation.
     * @deny (delete) No user can delete extracted profiles without validation.
     * @principle Public read, restricted writes.
     */
    match /extracted-profiles-test/{profileId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for verification results.
     * @path /verification-test/{verificationId}
     * @allow (get) Any user can get verification results.
     * @allow (list) Any user can list verification results.
     * @deny (create) No user can create verification results without validation.
     * @deny (update) No user can update verification results without validation.
     * @deny (delete) No user can delete verification results without validation.
     * @principle Public read, restricted writes.
     */
    match /verification-test/{verificationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for verified profiles.
     * @path /profiles-verified/{profileId}
     * @allow (get) Any user can get verified profiles.
     * @allow (list) Any user can list verified profiles.
     * @deny (create) No user can create verified profiles without validation.
     * @deny (update) No user can update verified profiles without validation.
     * @deny (delete) No user can delete verified profiles without validation.
     * @principle Public read, restricted writes.
     */
    match /profiles-verified/{profileId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}