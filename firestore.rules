/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and raw emails,
 * ensuring that only authenticated users can access their own data. Public read access
 * is enabled for extracted profiles, verification results, and verified profiles, while
 * write access is restricted.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}/profiles/{profileId}`.
 * - Raw emails are stored under `/users/{userId}/raw-emails-test/{emailId}`.
 * - Extracted profiles are stored under `/extracted-profiles-test/{profileId}`.
 * - Verification results are stored under `/verification-test/{verificationId}`.
 * - Verified profiles are stored under `/profiles-verified/{profileId}`.
 *
 * Key Security Decisions:
 * - User listing is disallowed for the `/users` collection.
 * - Path-based ownership is enforced for user profiles and raw emails.
 * - Public read access is enabled for extracted profiles, verification results, and verified profiles.
 *
 * Denormalization for Authorization:
 * - The `RawEmail` entity contains a `userProfileId` field, which is used to independently authorize access to the email without needing to fetch the associated user profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profile data. Only the user with ID {userId} can access their profile.
     * @path /users/{userId}/profiles/{profileId}
     * @allow (create) User A creates a profile with userId 'A' and profileId '123'.
     * @allow (get) User A reads a profile with userId 'A' and profileId '123'.
     * @allow (update) User A updates a profile with userId 'A' and profileId '123'.
     * @allow (delete) User A deletes a profile with userId 'A' and profileId '123'.
     * @deny (create) User B tries to create a profile with userId 'A' and profileId '123'.
     * @deny (get) User B tries to read a profile with userId 'A' and profileId '123'.
     * @deny (update) User B tries to update a profile with userId 'A' and profileId '123'.
     * @deny (delete) User B tries to delete a profile with userId 'A' and profileId '123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/profiles/{profileId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for raw email data. Only the user with ID {userId} can access their emails.
     * @path /users/{userId}/raw-emails-test/{emailId}
     * @allow (create) User A creates an email with userId 'A' and emailId '456'.
     * @allow (get) User A reads an email with userId 'A' and emailId '456'.
     * @allow (update) User A updates an email with userId 'A' and emailId '456'.
     * @allow (delete) User A deletes an email with userId 'A' and emailId '456'.
     * @deny (create) User B tries to create an email with userId 'A' and emailId '456'.
     * @deny (get) User B tries to read an email with userId 'A' and emailId '456'.
     * @deny (update) User B tries to update an email with userId 'A' and emailId '456'.
     * @deny (delete) User B tries to delete an email with userId 'A' and emailId '456'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/raw-emails-test/{emailId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to extracted profile data. Writes are disallowed.
     * @path /extracted-profiles-test/{profileId}
     * @allow (get) Any user (signed in or not) reads an extracted profile.
     * @allow (list) Any user (signed in or not) lists extracted profiles.
     * @deny (create) Any user tries to create an extracted profile.
     * @deny (update) Any user tries to update an extracted profile.
     * @deny (delete) Any user tries to delete an extracted profile.
     * @principle Provides public read access with restricted writes.
     */
    match /extracted-profiles-test/{profileId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to verification result data. Writes are disallowed.
     * @path /verification-test/{verificationId}
     * @allow (get) Any user (signed in or not) reads a verification result.
     * @allow (list) Any user (signed in or not) lists verification results.
     * @deny (create) Any user tries to create a verification result.
     * @deny (update) Any user tries to update a verification result.
     * @deny (delete) Any user tries to delete a verification result.
     * @principle Provides public read access with restricted writes.
     */
    match /verification-test/{verificationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to verified profile data. Writes are disallowed.
     * @path /profiles-verified/{profileId}
     * @allow (get) Any user (signed in or not) reads a verified profile.
     * @allow (list) Any user (signed in or not) lists verified profiles.
     * @deny (create) Any user tries to create a verified profile.
     * @deny (update) Any user tries to update a verified profile.
     * @deny (delete) Any user tries to delete a verified profile.
     * @principle Provides public read access with restricted writes.
     */
    match /profiles-verified/{profileId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}