/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allows public read access to emails while restricting writes to authenticated users,
 * and enforces ownership for attachments within emails.
 *
 * Data Structure:
 * - /userProfiles/{userProfileId}: Stores user profile data, with 'userProfileId' matching the user's UID.
 * - /emails/{emailId}: Stores email data. Publicly readable but writable only with proper authorization.
 * - /emails/{emailId}/attachments/{attachmentId}: Stores attachment metadata and content, owned by the corresponding email.
 *
 * Key Security Decisions:
 * - User profiles are private and accessible only to the owning user.
 * - Emails are publicly readable (for now, for prototyping).
 * - Attachments are only writable by authorized users who can write to the parent `/emails/{emailId}` document.
 * - Listing of user profiles is disallowed to prevent information disclosure.
 *
 * Denormalization for Authorization:
 * The `Email` entity contains a nullable `userProfileId`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the owner can read or write their profile.
     * @path /userProfiles/{userProfileId}
     * @allow (create) - User with UID 'user123' can create a profile document with ID 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete their own profile document with ID 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile document with ID 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile document with ID 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /userProfiles/{userProfileId} {
      // Helper function to check if the request is made by the owner of the user profile.
      function isOwner(userProfileId) {
        return request.auth != null && request.auth.uid == userProfileId;
      }

      // Allow a user to create their own profile if the user ID matches the document ID.
      allow create: if isOwner(userProfileId) && request.resource.data.id == userProfileId;

      // Allow the owner to get their own profile.
      allow get: if isOwner(userProfileId);

      // Disallow listing user profiles for privacy.
      allow list: if false;

      // Allow the owner to update their own profile, enforcing immutability of the userProfileId.
      allow update: if isOwner(userProfileId) && resource.data.id == userProfileId;

      // Allow the owner to delete their own profile.
      allow delete: if isOwner(userProfileId) && resource.data.id == userProfileId;
    }

    /**
     * @description Controls access to email documents.
     * @path /emails/{emailId}
     * @allow (get, list) - Any user can read email documents.
     * @allow (create) - Authenticated user can create email documents.
     * @deny (update, delete) - Only authenticated users can update and delete emails.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /emails/{emailId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow anyone to read emails.
      allow get, list: if true;

      // Allow authenticated users to create emails.
      allow create: if isSignedIn();

      // Allow only authenticated users to update emails.
      allow update: if isSignedIn() && resource != null;

      // Allow only authenticated users to delete emails.
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to attachment documents within an email.
     * @path /emails/{emailId}/attachments/{attachmentId}
     * @allow (get, list) - Any user can read attachment documents.
     * @allow (create) - Authenticated user can create attachment documents.
     * @deny (update, delete) - Only authenticated users can update and delete attachment documents.
     * @principle Restricts attachment writes to users authorized to write the parent email.
     */
    match /emails/{emailId}/attachments/{attachmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Allow anyone to read attachments.
      allow get, list: if true;

      // Allow authenticated users to create attachments.
      allow create: if isSignedIn();

      // Allow only authenticated users to update attachments.
      allow update: if isSignedIn() && resource != null;

      // Allow only authenticated users to delete attachments.
      allow delete: if isSignedIn() && resource != null;
    }
  }
}