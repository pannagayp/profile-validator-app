/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user profiles and raw emails,
 * ensuring that only authenticated users can access their own data.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}/profiles/{profileId}.
 * - Raw emails are stored under /users/{userId}/raw-emails-test/{emailId}.
 * - Extracted profiles are stored under /extracted-profiles-test/{profileId}.
 * - Verification results are stored under /verification-test/{verificationId}.
 * - Verified profiles are stored under /profiles-verified/{profileId}.
 *
 * Key Security Decisions:
 * - User listing is not allowed.
 * - Path-based ownership is enforced for user profiles and raw emails.
 * - RawEmail documents contain a userProfileId field to enforce authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profile data.
     * @path /users/{userId}/profiles/{profileId}
     * @allow (create) User with ID 'user123' creates a profile with ID 'profile456' under /users/user123/profiles/profile456.
     * @allow (get) User with ID 'user123' reads their own profile at /users/user123/profiles/profile456.
     * @allow (update) User with ID 'user123' updates their own profile at /users/user123/profiles/profile456.
     * @allow (delete) User with ID 'user123' deletes their own profile at /users/user123/profiles/profile456.
     * @deny (create) User with ID 'user123' attempts to create a profile under /users/otherUser/profiles/profile456 (mismatched user ID).
     * @deny (get) User with ID 'user123' attempts to read a profile under /users/otherUser/profiles/profile456 (mismatched user ID).
     * @deny (update) User with ID 'user123' attempts to update a profile under /users/otherUser/profiles/profile456 (mismatched user ID).
     * @deny (delete) User with ID 'user123' attempts to delete a profile under /users/otherUser/profiles/profile456 (mismatched user ID).
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/profiles/{profileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for raw email data.
     * @path /users/{userId}/raw-emails-test/{emailId}
     * @allow (create) User with ID 'user123' creates an email with ID 'email789' under /users/user123/raw-emails-test/email789.
     * @allow (get) User with ID 'user123' reads their own email at /users/user123/raw-emails-test/email789.
     * @allow (update) User with ID 'user123' updates their own email at /users/user123/raw-emails-test/email789.
     * @allow (delete) User with ID 'user123' deletes their own email at /users/user123/raw-emails-test/email789.
     * @deny (create) User with ID 'user123' attempts to create an email under /users/otherUser/raw-emails-test/email789 (mismatched user ID).
     * @deny (get) User with ID 'user123' attempts to read an email under /users/otherUser/raw-emails-test/email789 (mismatched user ID).
     * @deny (update) User with ID 'user123' attempts to update an email under /users/otherUser/raw-emails-test/email789 (mismatched user ID).
     * @deny (delete) User with ID 'user123' attempts to delete an email under /users/otherUser/raw-emails-test/email789 (mismatched user ID).
     * @principle Enforces document ownership for writes and authorization independence using userProfileId.
     */
    match /users/{userId}/raw-emails-test/{emailId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to extracted profiles, with no write access.
     * @path /extracted-profiles-test/{profileId}
     * @allow (get) Any user can read an extracted profile.
     * @allow (list) Any user can list extracted profiles.
     * @deny (create) No one can create extracted profiles.
     * @deny (update) No one can update extracted profiles.
     * @deny (delete) No one can delete extracted profiles.
     * @principle Public read access with no write access.
     */
    match /extracted-profiles-test/{profileId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to verification results, with no write access.
     * @path /verification-test/{verificationId}
     * @allow (get) Any user can read a verification result.
     * @allow (list) Any user can list verification results.
     * @deny (create) No one can create verification results.
     * @deny (update) No one can update verification results.
     * @deny (delete) No one can delete verification results.
     * @principle Public read access with no write access.
     */
    match /verification-test/{verificationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to verified profiles, with no write access.
     * @path /profiles-verified/{profileId}
     * @allow (get) Any user can read a verified profile.
     * @allow (list) Any user can list verified profiles.
     * @deny (create) No one can create verified profiles.
     * @deny (update) No one can update verified profiles.
     * @deny (delete) No one can delete verified profiles.
     * @principle Public read access with no write access.
     */
    match /profiles-verified/{profileId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}