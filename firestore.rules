/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and raw emails,
 * ensuring that only authenticated users can access their own data. Public read access is granted
 * to the 'extracted-profiles-test', 'verification-test', and 'profiles-verified' collections,
 * while writes are deliberately left unprotected due to lack of author information in the data structures.
 *
 * Data Structure:
 * - /users/{userId}/profiles/{profileId}: User profile information, owned by the user with ID {userId}.
 * - /users/{userId}/raw-emails-test/{emailId}: Raw email data, owned by the user with ID {userId}.
 * - /extracted-profiles-test/{profileId}: Contact information extracted from raw emails. Public read, unprotected write.
 * - /verification-test/{verificationId}: Results of profile verifications. Public read, unprotected write.
 * - /profiles-verified/{profileId}: Profiles that have passed verification. Public read, unprotected write.
 *
 * Key Security Decisions:
 * - User data (profiles, raw emails) is strictly controlled by user ID.
 * - Listing of user-owned documents is allowed only for the owner.
 * - Public collections ('extracted-profiles-test', 'verification-test', 'profiles-verified') are readable by anyone.
 * - Unprotected writes indicate incomplete entities in the schema and should be protected by adding an author field.
 *
 * Denormalization for Authorization:
 * - Each RawEmail document is associated with its userProfileId to allow for direct authorization
 *   without needing to fetch the user profile.
 *
 * Structural Segregation:
 * - User-specific data is stored under the /users/{userId} path, ensuring that users can only access
 *   data associated with their own profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures that only authenticated users can perform certain actions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces that a user can only access their own data.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}/profiles/{profileId}
     * @allow (create) - An authenticated user can create their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @allow (get, list, update, delete) - An authenticated user can read, update, and delete their own profile.
     * @deny (get, list, update, delete) - A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/profiles/{profileId} {
      // Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write rules
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for raw emails.
     * @path /users/{userId}/raw-emails-test/{emailId}
     * @allow (create) - An authenticated user can create raw emails associated with their profile.
     * @deny (create) - A user cannot create raw emails for another user's profile.
     * @allow (get, list, update, delete) - An authenticated user can read, update, and delete their own raw emails.
     * @deny (get, list, update, delete) - A user cannot read, update, or delete another user's raw emails.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/raw-emails-test/{emailId} {
      // Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write rules
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for extracted profiles. Public read, owner-only write.
     * @path /extracted-profiles-test/{profileId}
     * @allow (get, list) - Anyone can read extracted profiles.
     * @deny (create, update, delete) - No one can create, update, or delete extracted profiles (missing 'authorId' field).
     * @principle Allows public read access while restricting write access to document owners.
     */
    match /extracted-profiles-test/{profileId} {
      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Rules for verification results. Public read, owner-only write.
     * @path /verification-test/{verificationId}
     * @allow (get, list) - Anyone can read verification results.
     * @deny (create, update, delete) - No one can create, update, or delete verification results (missing 'authorId' field).
     * @principle Allows public read access while restricting write access to document owners.
     */
    match /verification-test/{verificationId} {
      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Rules for verified profiles. Public read, owner-only write.
     * @path /profiles-verified/{profileId}
     * @allow (get, list) - Anyone can read verified profiles.
     * @deny (create, update, delete) - No one can create, update, or delete verified profiles (missing 'authorId' field).
     * @principle Allows public read access while restricting write access to document owners.
     */
    match /profiles-verified/{profileId} {
      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }
}