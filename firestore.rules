/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for profile data and raw emails, while allowing public read access to extracted and verified profiles.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}/profiles/{profileId}, accessible only by the owning user.
 * - Raw emails are stored under /users/{userId}/raw-emails-test/{emailId}, accessible only by the owning user.
 * - Extracted profiles are stored in a top-level collection /extracted-profiles-test/{profileId} and are publicly readable.
 * - Verification results are stored in a top-level collection /verification-test/{verificationId} and are publicly readable.
 * - Verified profiles are stored in a top-level collection /profiles-verified/{profileId} and are publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Extracted, verification, and verified profiles are publicly readable but only modifiable through backend services.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * - RawEmail documents include the userProfileId to allow direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles. Only the owner can read, create, update, or delete their profile.
     * @path /users/{userId}/profiles/{profileId}
     * @allow (create) User A creates a profile with userId 'A' and profileId '123'.
     * @allow (get, update, delete) User A reads/modifies their profile with userId 'A' and profileId '123'.
     * @deny (create) User B tries to create a profile with userId 'A' and profileId '123'.
     * @deny (get, update, delete) User B tries to read/modify User A's profile with userId 'A' and profileId '123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/profiles/{profileId} {
      // Helper function to check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for raw emails. Only the owner can read, create, update, or delete their emails.
     * @path /users/{userId}/raw-emails-test/{emailId}
     * @allow (create) User A creates an email with userId 'A' and emailId '456'.
     * @allow (get, update, delete) User A reads/modifies their email with userId 'A' and emailId '456'.
     * @deny (create) User B tries to create an email with userId 'A' and emailId '456'.
     * @deny (get, update, delete) User B tries to read/modify User A's email with userId 'A' and emailId '456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/raw-emails-test/{emailId} {
      // Helper function to check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the requesting user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to extracted profiles.
     * @path /extracted-profiles-test/{profileId}
     * @allow (get, list) Any user can read extracted profiles.
     * @deny (create, update, delete) No user can create, update, or delete extracted profiles. This should be done by backend services only.
     * @principle Allows public read access while restricting write access.
     */
    match /extracted-profiles-test/{profileId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to verification results.
     * @path /verification-test/{verificationId}
     * @allow (get, list) Any user can read verification results.
     * @deny (create, update, delete) No user can create, update, or delete verification results. This should be done by backend services only.
     * @principle Allows public read access while restricting write access.
     */
    match /verification-test/{verificationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

        /**
     * @description Allows public read access to verified profiles.
     * @path /profiles-verified/{profileId}
     * @allow (get, list) Any user can read verified profiles.
     * @deny (create, update, delete) No user can create, update, or delete verified profiles. This should be done by backend services only.
     * @principle Allows public read access while restricting write access.
     */
    match /profiles-verified/{profileId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}